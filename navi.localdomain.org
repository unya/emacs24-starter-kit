#+AUTHOR: Pawel Lasek
#+TITLE: Navi specific init

* Loading parts of starter kit
** Org-mode
#+BEGIN_SRC emacs-lisp
(starter-kit-load "org")
#+END_SRC
** Misc

#+BEGIN_SRC emacs-lisp
(starter-kit-load "misc")
(starter-kit-load "misc-recommended")
#+END_SRC

   
** Haskell
#+BEGIN_SRC emacs-lisp
(starter-kit-load "haskell")
#+END_SRC

** JavaScript
#+BEGIN_SRC emacs-lisp
;(starter-kit-load "js")
(autoload 'js2-mode "js2-mode" "" t)
(add-to-list 'auto-mode-alist '("\\.js$" . espresso-mode))

#+END_SRC

** Ruby
#+BEGIN_SRC emacs-lisp
(starter-kit-load "ruby")
#+END_SRC


** Lisp

   First, let's load bindings.

#+BEGIN_SRC emacs-lisp
(starter-kit-load "lisp" "keys")
#+END_SRC

   Paredit too!

#+BEGIN_SRC emacs-lisp
(starter-kit-load "lisp" "paredit")
#+END_SRC

   Change faces for parens

#+BEGIN_SRC emacs-lisp
(starter-kit-load "lisp" "parenthesis-faces")
#+END_SRC

*** Emacs Lisp
    Load Emacs-Lisp customization.
#+BEGIN_SRC emacs-lisp
(starter-kit-load "lisp" "emacs-lisp")
#+END_SRC

*** Common Lisp
#+BEGIN_SRC emacs-lisp
(starter-kit-load "lisp" "common-lisp")
#+END_SRC

* Distel
  Loading erlang-mode
#+BEGIN_SRC emacs-lisp
  (add-to-list
   'load-path
       (car (file-expand-wildcards "/usr/lib/erlang/lib/tools-*/emacs")))
#+END_SRC

  Adding paths for distel:
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/src/distel/elisp")
#+END_SRC

  Loading distel:
#+BEGIN_SRC emacs-lisp
  (require 'distel)
  (distel-setup)
#+END_SRC
* Customizations

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (load-theme 'tango-dark)
  (setq delete-by-moving-to-trash nil
        uniquify-buffer-name-style 'post-forward
        safe-local-variable-values '((Mode . Lisp)))
#+END_SRC

  Old code!

#+BEGIN_SRC emacs-lisp
      (setq visible-bell nil
            fringe-mode nil)
      
      (setq inferior-lisp-program "sbcl")
      ;;; W3M as default browser
      (require 'w3m)
      (setq browse-url-browser-function 'w3m-browse-url)
      
      ;;; Dired 
      (require 'dired)
      (eval-after-load 'dired  
        '(define-key dired-mode-map (kbd "b")
           'browse-url-of-dired-file))
      
      ;;; SLIME modifications
      (load (expand-file-name "~/quicklisp/slime-helper.el"))
      ;; Replace "sbcl" with the path to your implementation
      (setq inferior-lisp-program "sbcl")
      (slime-setup '(slime-fancy slime-asdf
                                 slime-banner
                                 slime-compiler-notes-tree
  ;                               slime-highlight-edits
                                 slime-hyperdoc
                                 slime-indentation
      ;                           slime-media
                                 slime-sprof
                                 slime-xref-browser
                                 ;slime-sbcl-exts
                                 ))
      (eval-after-load 'slime
        '(progn
          (define-key slime-mode-map (kbd "<f12>")
            'slime-selector)
          (define-key slime-mode-map (kbd "<f1>")
            'hyperspec-lookup)))
      (eval-after-load 'slime-repl
        '(progn
          (define-key slime-repl-mode-map (kbd "<f12>")
            'slime-selector)
          (define-key slime-repl-mode-map (kbd "<f1>")
            'hyperspec-lookup)
          (define-key slime-mode-map (kbd "<f9>")
            'slime-compile-file)))
      (setq common-lisp-hyperspec-root "/usr/share/doc/hyperspec/HyperSpec/")
      
#+END_SRC
** Org-Mode
#+BEGIN_SRC emacs-lisp
(setq org-mobile-directory "~/Dropbox/mobile-org")
(setq org-directory "~/Dropbox/org")
(setq org-default-notes-file "~/Dropbox/org/notes.org")

#+END_SRC
